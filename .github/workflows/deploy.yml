name: CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_WEB: ghcr.io/jeremy0404/wishlist-web
  IMAGE_API: ghcr.io/jeremy0404/wishlist-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compute tags
        id: meta
        run: |
          echo "TAG=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "LATEST=latest" >> $GITHUB_OUTPUT

      - name: Login to GHCR (with GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build & push WEB
      - name: Build & push web
        uses: docker/build-push-action@v6
        with:
          context: ./web
          push: true
          tags: |
            ${{ env.IMAGE_WEB }}:${{ steps.meta.outputs.TAG }}
            ${{ env.IMAGE_WEB }}:${{ steps.meta.outputs.LATEST }}
          cache-from: type=registry,ref=${{ env.IMAGE_WEB }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_WEB }}:buildcache,mode=max

      # Build & push API
      - name: Build & push api
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: |
            ${{ env.IMAGE_API }}:${{ steps.meta.outputs.TAG }}
            ${{ env.IMAGE_API }}:${{ steps.meta.outputs.LATEST }}
          cache-from: type=registry,ref=${{ env.IMAGE_API }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_API }}:buildcache,mode=max

      - name: Save tag
        run: echo "${{ steps.meta.outputs.TAG }}" > tag.txt

      - uses: actions/upload-artifact@v4
        with:
          name: deploy-tag
          path: tag.txt

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: deploy-tag
      - id: readtag
        run: echo "TAG=$(cat tag.txt)" >> $GITHUB_OUTPUT

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -euo pipefail
            cd ${{ secrets.VPS_PATH }}
            echo "Deploying tag ${{ steps.readtag.outputs.TAG }}"
            export IMAGE_TAG=${{ steps.readtag.outputs.TAG }}

            # Login to GHCR to pull private images
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_READ_TOKEN }}

            # Pull & restart
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d

            # Optional: clean old unused layers
            docker image prune -f

            # Health checks
            echo "Checking API health..."
            curl -fsS http://localhost:8888/api/health || (echo "API healthcheck failed" && exit 1)
