name: CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_WEB: ghcr.io/jeremy0404/wishlist-web
  IMAGE_API: ghcr.io/jeremy0404/wishlist-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compute tags
        id: meta
        run: |
          echo "TAG=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "LATEST=latest" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Login to GHCR (with GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build & push WEB
      - name: Build & push web
        uses: docker/build-push-action@v6
        with:
          context: ./web
          push: true
          build-args: |
            COMMIT_SHA=${{ steps.meta.outputs.TAG }}
          tags: |
            ${{ env.IMAGE_WEB }}:${{ steps.meta.outputs.TAG }}
            ${{ env.IMAGE_WEB }}:${{ steps.meta.outputs.LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build & push API
      - name: Build & push api
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: |
            ${{ env.IMAGE_API }}:${{ steps.meta.outputs.TAG }}
            ${{ env.IMAGE_API }}:${{ steps.meta.outputs.LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save tag
        run: echo "${{ steps.meta.outputs.TAG }}" > tag.txt

      - uses: actions/upload-artifact@v4
        with:
          name: deploy-tag
          path: tag.txt

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: deploy-tag
      - id: readtag
        run: echo "TAG=$(cat tag.txt)" >> $GITHUB_OUTPUT

      - name: SSH deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -euo pipefail
            cd ${{ secrets.VPS_PATH }}

            echo "Logging into GHCR..."
            echo "${{ secrets.GHCR_READ_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            export IMAGE_TAG=${{ steps.readtag.outputs.TAG }}
            echo "Deploying IMAGE_TAG=$IMAGE_TAG"

            # Login to GHCR to pull private images
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_READ_TOKEN }}

            # Pull & restart
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d --force-recreate --remove-orphans

            # Cleanup
            docker image prune -f || true

            # Health check with retries (web â†’ api proxy)
            echo "Checking API health via web proxy..."
            for i in {1..20}; do
              if curl -fsS http://localhost:8888/api/health > /dev/null; then
                echo "Health OK"
                exit 0
              fi
              echo "Waiting for app to be ready (try $i/20)..."
              sleep 2
            done

            echo "Healthcheck FAILED, dumping logs"
            docker compose -f docker-compose.production.yml logs --tail=200 web api
            exit 1
